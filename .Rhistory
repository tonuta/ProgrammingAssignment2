ints
ints > 5
which(ints)
which(ints>7)
any(ints<0)
all(ints>0)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
Sys.Date()
mean(c(2,4,5))
swirl()
rm(list=ls())
swirl()
install.packages("swirl")
install.packages("swirl")
rm(list=ls())
library(swirl)
install_from_swirl("R Programming")
swirl()
Sys.Date()
mean(c(2,4,5))
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class()
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
The Sys.Date()
Sys.Date()
mean(c(2,4,5))
swirl()
editor(file = file, title = title)
boring_function.R
read(boring_function.R)
options(editor = "internal")
swirls()
swirl()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0)
)
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
submit()
mad_libs(place = "Bucharest", adjustive = "wonderful", noun = "tiger")
submit()
"I" %p% "love" %p% "R!"
rm(list=ls())
library(datasets)
data(iris)
?iris
mean(Sepal.Length, virginica)
mean(Sepal.Length(virginica)
)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
debug(ls)
ls
iris
iris3
cars
library(datasets)
data(mtcars)
?mtcars
mtcars
getwd(0)
getwd()
setwd("I:\Coursera\Data Science Certificate\CACHEMATRIX\ProgrammingAssignment2")
setwd('I:\Coursera\Data Science Certificate\CACHEMATRIX\ProgrammingAssignment2')
setwd('I:\Coursera\Data Science Certificate\CACHEMATRIX')
setwd('I:/Coursera/Data Science Certificate/CACHEMATRIX/ProgrammingAssignment2')
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
x<-matrix(avector, nrow=3)
x
testcached<-makeCacheMatrix(x)
cachematrix(x)
cachematrix
cachematrix.R
#! I:/Coursera/Data Science Certificate/CACHEMATRIX/ProgrammingAssignment2/cachematrix
testcached<-makeCacheMatrix(x)
#! I:/Coursera/Data Science Certificate/CACHEMATRIX/ProgrammingAssignment2/cachematrix
#! I:/Coursera/Data Science Certificate/CACHEMATRIX/ProgrammingAssignment2/cachematrix
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
testcached <- makeCacheMatrix(test)
testinv <- cacheSolve(testcached)
testinv
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
testcached <- makeCacheMatrix(test)
testinv <- cacheSolve(testcached)
testinv
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
testcached <- makeCacheMatrix(test)
testinv <- cacheSolve(testcached)
testinv
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The function cacheSolve returns the inverse of a matrix A created with
## the makeCacheMatrix function.
## If the cached inverse is available, cacheSolve retrieves it, while if
## not, it computes, caches, and returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_x <- x$getinverse()
if (!is.null(inv_x)) {
message("getting cached inverse matrix")
return(inv_x)
} else {
inv_x <- solve(x$get())
x$setinverse(inv_x)
return(inv_x)
}
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
testcached <- makeCacheMatrix(test)
testinv <- cacheSolve(testcached)
testinv
#! I:/Coursera/Data Science Certificate/CACHEMATRIX/ProgrammingAssignment2/cachematrix.R
#! I:/Coursera/Data Science Certificate/CACHEMATRIX/ProgrammingAssignment2/cachematrix.R
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The function cacheSolve returns the inverse of a matrix A created with
## the makeCacheMatrix function.
## If the cached inverse is available, cacheSolve retrieves it, while if
## not, it computes, caches, and returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_x <- x$getinverse()
if (!is.null(inv_x)) {
message("getting cached inverse matrix")
return(inv_x)
} else {
inv_x <- solve(x$get())
x$setinverse(inv_x)
return(inv_x)
}
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
testcached = makeCacheMatrix(test)
testinv = cacheSolve(testcached)
testinv
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The function cacheSolve returns the inverse of a matrix A created with
## the makeCacheMatrix function.
## If the cached inverse is available, cacheSolve retrieves it, while if
## not, it computes, caches, and returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_x <- x$getinverse()
if (!is.null(inv_x)) {
message("getting cached inverse matrix")
return(inv_x)
} else {
inv_x <- solve(x$get())
x$setinverse(inv_x)
return(inv_x)
}
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
testcached = makeCacheMatrix(test)
test$get()
testinv = cacheSolve(testcached)
testinv
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The function cacheSolve returns the inverse of a matrix A created with
## the makeCacheMatrix function.
## If the cached inverse is available, cacheSolve retrieves it, while if
## not, it computes, caches, and returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_x <- x$getinverse()
if (!is.null(inv_x)) {
message("getting cached inverse matrix")
return(inv_x)
} else {
inv_x <- solve(x$get())
x$setinverse(inv_x)
return(inv_x)
}
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
test
testcached = makeCacheMatrix(test)
testinv = cacheSolve(testcached)
testinv
source("cachematrix.R")
R < cachematrix.R
Rscript cachematrix.R
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
test
testcached = makeCacheMatrix(test)
testinv = cacheSolve(testcached)
testinv
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
test
makeCacheMatrix(test)
testinv = cacheSolve(testcached)
testinv
x = rbind(c(1, -1/4), c(-1/4, 1))
## > m = makeCacheMatrix(x)
## > m$get()
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
library("Matrix", lib.loc="C:/Program Files/R/R-3.2.4revised/library")
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
test
makeCacheMatrix(test)
testinv = cacheSolve(testcached)
testinv
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
rm(list=ls())
avector<-c(1,1,1,3,4,3,3,3,4)
test <- matrix(avector, nrow=3)
test
class(test)
makeCacheMatrix(test)
testinv = cacheSolve(testcached)
testinv
help.search("makeCacheMatrix.function")
source("cachematrix.R")
RSiteSearch("makeCacheMatrix.function")
